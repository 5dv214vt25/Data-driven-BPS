/**
 * Simod Output API Calls
 * 
 * This file contains functions for interacting with the Simod Output endpoints.
 * These endpoints handle the management of output files generated by Simod simulations.
 * 
 * Functions to implement:
 * - uploadSimodOutput: Upload Simod simulation output
 * - listSimodOutputs: List all Simod outputs for a user
 * - getSimodOutput: Get a specific Simod output by ID
 * - deleteSimodOutput: Delete a specific Simod output
 * - updateSimodOutput: Update Simod output information
 */

/**
 * Fetch all Simod outputs for a user, optionally filtered by scenario ID
 * 
 * @param userId - The ID of the user
 * @param eventLogId - Optional ID to filter outputs (actually used as scenario_id)
 * @returns List of Simod outputs
 */
export const fetchSimodOutputs = async (userId: string, eventLogId?: number) => {
  console.log(`API: Fetching Simod outputs for user ${userId}${eventLogId ? ` with scenario ID ${eventLogId}` : ''}`);

  const url = new URL('/storage/list-simod-outputs', window.location.origin);
  url.searchParams.append('user_id', userId);
  if (eventLogId) {
    url.searchParams.append('scenario_id', eventLogId.toString());
  }

  const response = await fetch(url.toString());

  if (!response.ok) {
    let errorMessage = 'Failed to fetch Simod outputs';
    try {
      const errorData = await response.json();
      errorMessage = errorData.message || errorMessage;
    } catch {
      // Ignore JSON parse error
    }

    const error = new Error(errorMessage) as Error & { status?: number };
    error.status = response.status;
    throw error;
  }

  return response.json();
};


/**
 * Fetch a specific Simod output
 * 
 * @param userId - The ID of the user (not used in actual API call)
 * @param scenarioId - The ID of the scenario
 * @returns Blob containing the Simod output
 */
export const fetchSimodOutput = async (scenarioId: number): Promise<Blob> => {
  console.log(`API: Fetching Simod output for scenario ID ${scenarioId}`);

  const url = new URL('/storage/get-simod-output', window.location.origin);
  url.searchParams.append('simod_scenario_id', scenarioId.toString());

  const response = await fetch(url.toString());

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.message || 'Failed to fetch Simod output');
  }

  return response.blob();
};

/**
 * Upload a new Simod output
 * 
 * @param userId - The ID of the user (not used in actual API call)
 * @param scenarioId - The ID of the scenario
 * @param file - The file to upload
 * @returns Success status
 */
export const uploadSimodOutput = async (scenarioId: number, file: File): Promise<boolean> => {
  console.log(`API: Uploading Simod output for scenario ID ${scenarioId}, file: ${file.name}`);

  const formData = new FormData();
  formData.append('simod_scenario_id', scenarioId.toString());
  formData.append('file', file);

  const response = await fetch('/storage/upload-simod-output', {
    method: 'POST',
    body: formData,
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.message || 'Failed to upload Simod output');
  }

  const data = await response.json();
  return data.status === 'success';
};

/**
 * Update an existing Simod output
 * 
 * @param userId - The ID of the user (not used in actual API call)
 * @param scenarioId - The ID of the scenario
 * @param file - The file with updated content
 * @returns Success status
 */
export const updateSimodOutput = async (scenarioId: number, file: File): Promise<boolean> => {
  console.log(`API: Updating Simod output for scenario ID ${scenarioId}, file: ${file.name}`);

  const url = new URL('/storage/update-simod-output', window.location.origin);
  url.searchParams.append('simod_scenario_id', scenarioId.toString());

  const formData = new FormData();
  formData.append('file', file);

  const response = await fetch(url.toString(), {
    method: 'PUT',
    body: formData,
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.message || 'Failed to update Simod output');
  }

  const data = await response.json();
  return data.status === 'success';
};

/**
 * Delete a specific Simod output
 * 
 * @param userId - The ID of the user (not used in actual API call)
 * @param scenarioId - The ID of the scenario
 * @returns Success status
 */
export const deleteSimodOutput = async (scenarioId: number): Promise<boolean> => {
  console.log(`API: Deleting Simod output for scenario ID ${scenarioId}`);

  const url = new URL('/storage/delete-simod-output', window.location.origin);
  url.searchParams.append('simod_scenario_id', scenarioId.toString());

  const response = await fetch(url.toString(), {
    method: 'DELETE',
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.message || 'Failed to delete Simod output');
  }

  const data = await response.json();
  return data.status === 'success';
};
